//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lensert {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "14.0.0.0")]
    internal sealed partial class Preferences : global::System.Configuration.ApplicationSettingsBase {
        
        private static Preferences defaultInstance = ((Preferences)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Preferences())));
        
        public static Preferences Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Alt, Shift, F")]
        public global::Shortcut.Hotkey HotkeySelectFullscreen {
            get {
                return ((global::Shortcut.Hotkey)(this["HotkeySelectFullscreen"]));
            }
            set {
                this["HotkeySelectFullscreen"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Alt, Shift, W")]
        public global::Shortcut.Hotkey HotkeySelectCurrentWindow {
            get {
                return ((global::Shortcut.Hotkey)(this["HotkeySelectCurrentWindow"]));
            }
            set {
                this["HotkeySelectCurrentWindow"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("catlover")]
        public string Username {
            get {
                return ((string)(this["Username"]));
            }
            set {
                this["Username"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Wachtwoord1")]
        public string Password {
            get {
                return ((string)(this["Password"]));
            }
            set {
                this["Password"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool CopyToClipboard {
            get {
                return ((bool)(this["CopyToClipboard"]));
            }
            set {
                this["CopyToClipboard"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("White")]
        public global::System.Drawing.Color SelectionBackgroundColor {
            get {
                return ((global::System.Drawing.Color)(this["SelectionBackgroundColor"]));
            }
            set {
                this["SelectionBackgroundColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Red")]
        public global::System.Drawing.Color SelectionRectangleColor {
            get {
                return ((global::System.Drawing.Color)(this["SelectionRectangleColor"]));
            }
            set {
                this["SelectionRectangleColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool StartupOnLogon {
            get {
                return ((bool)(this["StartupOnLogon"]));
            }
            set {
                this["StartupOnLogon"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Alt, Shift, S")]
        public global::Shortcut.Hotkey HotkeySelectWindow {
            get {
                return ((global::Shortcut.Hotkey)(this["HotkeySelectWindow"]));
            }
            set {
                this["HotkeySelectWindow"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Alt, Shift, A")]
        public global::Shortcut.Hotkey HotkeySelectArea {
            get {
                return ((global::Shortcut.Hotkey)(this["HotkeySelectArea"]));
            }
            set {
                this["HotkeySelectArea"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Alt, Shift, C")]
        public global::Shortcut.Hotkey HotkeyClipboard {
            get {
                return ((global::Shortcut.Hotkey)(this["HotkeyClipboard"]));
            }
            set {
                this["HotkeyClipboard"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool RememberMe {
            get {
                return ((bool)(this["RememberMe"]));
            }
            set {
                this["RememberMe"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool ShowNotification {
            get {
                return ((bool)(this["ShowNotification"]));
            }
            set {
                this["ShowNotification"] = value;
            }
        }
    }
}
